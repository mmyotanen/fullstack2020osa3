{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","message","className","Filter","props","value","onChange","PersonForm","onSubmit","value1","onChange1","value2","onChange2","type","Persons","notesToShow","map","name","key","number","onClick","window","confirm","personService","setPersons","persons","filter","n","setErrorMessage","setTimeout","App","useState","newName","setNewName","newNumber","setNewNumber","showAll","setShowAll","errorMessage","useEffect","initialPersons","toLocaleLowerCase","includes","event","console","log","target","preventDefault","noteObject","onkoListassa","indeksi","forEach","item","index","array","catch","error","person","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.238b2724.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nconst deletePerson = (id) => {\r\n  const request = axios.delete(`${baseUrl}/${id}`);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default { getAll, create, update, deletePerson };\r\n","import React, { useState, useEffect } from \"react\";\n\nimport personService from \"./services/persons\";\nimport \"./index.css\";\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nconst Filter = (props) => {\n  return (\n    <div>\n      filter shown with <input value={props.value} onChange={props.onChange} />\n    </div>\n  );\n};\n\nconst PersonForm = (props) => {\n  return (\n    <form onSubmit={props.onSubmit}>\n      <div>\n        name: <input value={props.value1} onChange={props.onChange1} />\n      </div>\n      <div>\n        number: <input value={props.value2} onChange={props.onChange2} />\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  );\n};\n\nconst Persons = (props) => {\n  return (\n    <ul>\n      {props.notesToShow.map((name) => (\n        <li key={name.name}>\n          {name.name} {name.number}\n          <button\n            onClick={() => {\n              if (window.confirm(`Delete ${name.name} ?`)) {\n                personService.deletePerson(name.id);\n                props.setPersons(props.persons.filter((n) => n.id !== name.id));\n                props.setErrorMessage(\n                  `Person '${name.name}' was already removed from server`\n                );\n                setTimeout(() => {\n                  props.setErrorMessage(null);\n                }, 5000);\n              }\n            }}\n          >\n            delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNumber, setNewNumber] = useState(\"\");\n  const [showAll, setShowAll] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then((initialPersons) => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = (event) => {\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleAllChange = (event) => {\n    console.log(event.target.value);\n    setShowAll(event.target.value);\n  };\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  const addName = (event) => {\n    event.preventDefault();\n\n    const noteObject = {\n      name: newName,\n      number: newNumber,\n    };\n    let onkoListassa = false;\n    let indeksi = 0;\n    let id = 0;\n    persons.forEach(function (item, index, array) {\n      if (item.name === newName) {\n        console.log(newName);\n        onkoListassa = true;\n        indeksi = index;\n        id = item.id;\n      }\n    });\n\n    if (onkoListassa) {\n      if (\n        window.confirm(\n          `${newName} is already added to phonebook, change number`\n        )\n      ) {\n        personService.update(persons[indeksi].id, noteObject).catch((error) => {\n          setErrorMessage(`Person ${newName} already deleted `);\n          setTimeout(() => {\n            setErrorMessage(null);\n          }, 5000);\n          setPersons(persons.filter((n) => n.id !== id));\n        });\n        setErrorMessage(`Person ${newName} new number is '${newNumber}' `);\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n\n        setPersons(\n          persons.map((person) => (person.id !== id ? person : noteObject))\n        );\n      }\n    } else {\n      setPersons(persons.concat(noteObject));\n      setNewName(\"\");\n      setNewNumber(\"\");\n      personService.create(noteObject);\n      setErrorMessage(`Person ${newName} with number '${newNumber}' added `);\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000);\n    }\n  };\n\n  const notesToShow = persons.filter((name) =>\n    name.name.toLocaleLowerCase().includes(showAll.toLocaleLowerCase())\n  );\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={errorMessage} />\n      <Filter value={showAll} onChange={handleAllChange} />\n      <h2>add a new</h2>\n      <PersonForm\n        onSubmit={addName}\n        value1={newName}\n        onChange1={handleNameChange}\n        value2={newNumber}\n        onChange2={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons\n        persons={persons}\n        setPersons={setPersons}\n        notesToShow={notesToShow}\n        setErrorMessage={setErrorMessage}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}